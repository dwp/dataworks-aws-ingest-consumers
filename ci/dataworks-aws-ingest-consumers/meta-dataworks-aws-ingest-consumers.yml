meta-dataworks-aws-ingest-consumers:
  resources:
    - name: ecr-resource
      type: registry-image-resource
      source:
        repository: unset
        AWS_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((dataworks.aws_management_acc)):role/ci

  plan:
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              export TF_VAR_k2hb_version=$(cat ../k2hb-release/version)
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              export TF_VAR_k2hb_reconciliation_container_version="@$(cat ../k2hb-reconciliation-image/digest)"
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: k2hb-release
          - name: dw-al2-hardened-ami
          - name: dataworks-aws-ingest-consumers
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
          - name: k2hb-reconciliation-image

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              export TF_VAR_k2hb_version=$(cat ../k2hb-release/version)
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              export TF_VAR_k2hb_reconciliation_container_version="@$(cat ../k2hb-reconciliation-image/digest)"
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: k2hb-release
          - name: dw-al2-hardened-ami
          - name: dataworks-aws-ingest-consumers
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
          - name: k2hb-reconciliation-image
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output-ingest-consumers:
      task: terraform-output-ingest-consumers
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          dir: dataworks-aws-ingest-consumers
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              export TF_VAR_k2hb_version=$(cat ../k2hb-release/version)
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              export TF_VAR_k2hb_reconciliation_container_version="@$(cat ../k2hb-reconciliation-image/digest)"
              terraform init
              terraform workspace show
              terraform output --json > ../terraform-output-ingest-consumers/outputs.json
        inputs:
          - name: dataworks-aws-ingest-consumers
          - name: k2hb-release
          - name: dw-al2-hardened-ami
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
          - name: k2hb-reconciliation-image
        outputs:
          - name: terraform-output-ingest-consumers

    terraform-output-management:
      task: terraform-output-management
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_WORKSPACE: management
        run:
          path: sh
          dir: aws-management-infrastructure
          args:
            - -exc
            - |
              terraform init
              terraform workspace show
              terraform output --json > ../terraform-output-management/outputs.json
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management

    mirror-jar:
      task: mirror-jar
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: terraform-output-management
          - name: jar-release
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export BUCKET=`cat terraform-output-management/outputs.json | jq -r ".artefact_bucket.value.id"`
              aws s3 cp jar-release/*.${RELEASE_EXTENSION} s3://${BUCKET}/${ARTEFACT_DIR}/

    run-behave-job:
      task: run-behave-job
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 500
          ASSUME_DURATION: 14400
        run:
          dir: dataworks-behavioural-framework
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              source /assume-role

              set +x

              export E2E_FEATURE_TAG_FILTER="@${E2E_FEATURE_TAG_FILTER}"
              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: meta

    tear-down:
      task: tear-down
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              source /assume-role
              set +x
              pipeline_name=`cat "meta/build_pipeline_name"`
              job_name=`cat "meta/build_job_name"`
              build_number=`cat "meta/build_name"`
              cat <<EOF> key.json
              {
                "JobId": {
                  "S": "${pipeline_name}_${job_name}_${build_number}"
                }
              }
              EOF
              aws dynamodb delete-item --table-name StubUcfsJobStatus --key file://key.json
        inputs:
          - name: meta

    provision-metadata-table:
      task: provision-metadata-table
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          TABLE_NAME: placeholder
          PARTITION_NAME: placeholder
        inputs:
          - name: terraform-output-ingest-consumers
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ./previous_success/exit-if-succeeded.sh ]; then
                source ./previous_success/exit-if-succeeded.sh
              fi
              source /assume-role
              partition_count=$(jq -r .k2hb_reconciliation.value.partition_counts.${PARTITION_NAME}_reconciliation < terraform-output-ingest-consumers/outputs.json)
              echo partition_count: \'$partition_count\'.
              set +x
              jq -n --arg Tablename "$TABLE_NAME" --arg PartitionCount $partition_count '{"table-name": $Tablename, "partition-count": $PartitionCount }' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name ingestion-metadata-provisioner --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              echo "Invocation result is:"
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"

    provision-metadata-table-ucfs:
      .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table ))
      task: provision-metadata-table-ucfs
      config:
        params:
          TABLE_NAME: UCFS
          PARTITION_NAME: ucfs

    provision-metadata-table-equalities:
      .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table ))
      task: provision-metadata-table-equalities
      config:
        params:
          TABLE_NAME: EQUALITIES
          PARTITION_NAME: equality

    provision-metadata-table-audit:
      .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table ))
      task: provision-metadata-table-audit
      config:
        params:
          TABLE_NAME: AUDIT
          PARTITION_NAME: audit

    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              source ./previous_success/exit-if-succeeded.sh

              AMI_ID=$(cat dw-al2-hardened-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"

              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results

              echo "$AMI_ID $RESULT" > "$PIPELINE.test"

              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: dw-al2-hardened-ami
          - name: previous_success

    check-ami-test-results:
      task: check-ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              PREVIOUS_SUCCESS=false
              AMI_ID=$(cat untested_ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              PATH_TO_RESULTS="ami-builder-configs/results"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs

              if [ -f "./$PATH_TO_RESULTS/$PIPELINE.test" ]; then
                set +e
                grep "$AMI_ID SUCCESS" "./$PATH_TO_RESULTS/$PIPELINE.test"
                if [ $? -eq 0 ]; then
                  PREVIOUS_SUCCESS=true
                fi
                set -e
              fi

              touch ./previous_success/exit-if-succeeded.sh

              if $PREVIOUS_SUCCESS; then
                 echo 'echo "AMI already passed. Exiting..."; exit 0' > ./previous_success/exit-if-succeeded.sh
              fi

              chmod +x ./previous_success/exit-if-succeeded.sh
        outputs:
          - name: previous_success
        inputs:
          - name: meta
          - name: untested_ami
