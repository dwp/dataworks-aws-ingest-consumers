jobs:
  - name: apply-and-test-with-ami
    max_in_flight: 1
    serial_groups: [qa-applies]
    plan:
      - in_parallel:
          - put: meta
            resource: meta-qa
          - get: dataworks-behavioural-framework
            trigger: false
          - get: dw-al2-hardened-ami
            resource: untested-dw-al2-jvm-ami
            trigger: true
          - get: dataworks-aws-ingest-consumers
            trigger: true
          - get: dw-al2-ecs-ami
            trigger: true
          - get: k2hb-reconciliation-image
            version:
              digest: ((k2hb_reconciliation_container_version))
            trigger: true
          - get: k2hb-release
            version:
              tag: ((k2hb_version))
            trigger: true
            passed:
              - mirror-k2hb
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.check-ami-test-results ))
        input_mapping:
          untested_ami: dw-al2-hardened-ami
      - .: (( inject meta.plan.terraform-bootstrap ))
        config:
          inputs:
            - name: previous_success
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.terraform-apply ))
        config:
          inputs:
            - name: previous_success
        params:
          TF_WORKSPACE: 'qa'
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.terraform-plan ))
        config:
          inputs:
            - name: previous_success
        params:
          TF_WORKSPACE: 'qa'

      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.run-behave-job ))
        task: data-streaming-tests
        config:
          inputs:
            - name: previous_success
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            E2E_FEATURE_TAG_FILTER: "data-streaming"
            DATA_STREAMING_TESTS_SKIP_RECONCILING: "true"

      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.run-behave-job))
        task: end-to-end-tests
        config:
          inputs:
            - name: previous_success
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            E2E_FEATURE_TAG_FILTER: "end-to-end"

      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.terraform-output-ingest-consumers ))
        config:
          inputs:
            - name: previous_success
        params:
          TF_WORKSPACE: 'qa'
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table-ucfs ))
        config:
          inputs:
            - name: previous_success
          params:
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table-equalities ))
        config:
          inputs:
            - name: previous_success
          params:
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
      - .: (( inject meta-dataworks-aws-ingest-consumers.plan.provision-metadata-table-audit ))
        config:
          inputs:
            - name: previous_success
          params:
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci

    ensure:
      do:
        - .: (( inject meta-dataworks-aws-ingest-consumers.plan.tear-down ))
          config:
            inputs:
              - name: previous_success
            params:
              AWS_ACC: ((aws_account.qa))
              AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
    on_failure:
      do:
        - .: (( inject meta-dataworks-aws-ingest-consumers.plan.ami-test-results ))
          task: ami-test-result-fail
          config:
            params:
              RESULT: FAILED

    on_success:
      do:
        - .: (( inject meta-dataworks-aws-ingest-consumers.plan.ami-test-results ))
          task: ami-test-result-success
          config:
            params:
              RESULT: SUCCESS
