meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: dataworks-aws-ingest-consumers
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              export TF_VAR_k2hb_version=$(cat ../k2hb-release/version)
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: k2hb-release
          - name: dw-al2-hardened-ami
          - name: dataworks-aws-ingest-consumers
          - name: terraform-bootstrap

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              export TF_VAR_k2hb_version=$(cat ../k2hb-release/version)
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: k2hb-release
          - name: dw-al2-hardened-ami
          - name: dataworks-aws-ingest-consumers
          - name: terraform-bootstrap
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output-management:
      task: terraform-output-management
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        params:
          TF_WORKSPACE: management
        run:
          path: sh
          dir: aws-management-infrastructure
          args:
            - -exc
            - |
              terraform init
              terraform workspace show
              terraform output --json > ../terraform-output-management/outputs.json
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management

    mirror-jar:
      task: mirror-jar
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: terraform-output-management
          - name: jar-release
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export BUCKET=`cat terraform-output-management/outputs.json | jq -r ".artefact_bucket.value.id"`
              aws s3 cp jar-release/*.${RELEASE_EXTENSION} s3://${BUCKET}/${ARTEFACT_DIR}/

    run-behave-job:
      task: run-behave-job
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: 0.0.24
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 500
          ASSUME_DURATION: 14400
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x

              export E2E_FEATURE_TAG_FILTER="@${E2E_FEATURE_TAG_FILTER}"
              cd src/runners
              ./run-ci.sh \
              "../../../meta" \
              "../../../terraform-output-ingest/outputs.json" \
              "../../../terraform-output-internal-compute/outputs.json" \
              "../../../terraform-output-snapshot-sender/outputs.json" \
              "NOT_SET" \
              "NOT_SET" \
              "../../../terraform-output-ingest-consumers/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: meta
          - name: terraform-output-ingest
          - name: terraform-output-internal-compute
          - name: terraform-output-snapshot-sender

    terraform-output-ingest:
      task: terraform-output-ingest
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-ingest/outputs.json
          dir: aws-ingestion
        inputs:
          - name: aws-ingestion
        outputs:
          - name: terraform-output-ingest

    terraform-output-internal-compute:
      task: terraform-output-internal-compute
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
        inputs:
          - name: aws-internal-compute
        outputs:
          - name: terraform-output-internal-compute

    terraform-output-snapshot-sender:
      task: terraform-output-snapshot-sender
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-snapshot-sender/outputs.json
          dir: aws-snapshot-sender
        inputs:
          - name: aws-snapshot-sender
        outputs:
          - name: terraform-output-snapshot-sender

    tear-down:
      task: tear-down
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              pipeline_name=`cat "meta/build_pipeline_name"`
              job_name=`cat "meta/build_job_name"`
              build_number=`cat "meta/build_name"`
              cat <<EOF> key.json
              {
                "JobId": {
                  "S": "${pipeline_name}_${job_name}_${build_number}"
                }
              }
              EOF
              aws dynamodb delete-item --table-name StubUcfsJobStatus --key file://key.json
        inputs:
          - name: aws-ingestion
          - name: meta

    terraform-output-ingest-consumers:
      task: terraform-output-ingest-consumers
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              ls -la terraform.tf
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-ingest-consumers/outputs.json
          dir: dataworks-aws-ingest-consumers
        inputs:
          - name: dataworks-aws-ingest-consumers
          - name: terraform-bootstrap
        outputs:
          - name: terraform-output-ingest-consumers
