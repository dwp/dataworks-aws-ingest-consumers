meta-corporate-storage-coalescence:
  plan:
    run-coalesce-task:
      task: run-coalesce-task
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: 0.0.25
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          ASSUME_DURATION: 43200
        run:
          dir: dataworks-corporate-storage-coalescence
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x

              function execute_coalesce {
                local date_to_run=$(date -d "$1" +'%Y/%m/%d')
                local full_prefix="${S3_BASE_PREFIX}/${date_to_run}/"

                echo "Running coalesce for date of '${date_to_run}' and prefix of '${full_prefix}'"
                python main.py -b "${S3_BUCKET_ID}" -f "${MAX_SIZE_FILES}" -s "${MAX_SIZE_BYTES}" -p "${full_prefix}"
                local result=$?

                echo "Checking result of coalesce"
                if [ ! $result -eq 0 ]; then
                    echo "Exiting with error due to failed coalesce with exit code of '$result'"
                    exit 1
                else
                    echo "Coalesce successful"
                fi
              }

              function set_storage_type_values {
                echo "Setting corporate storage values for given storage type"

                if [[ "${CORPORATE_STORAGE_TYPE}" == "equalities" ]]; then
                  echo "Setting equalities corporate storage values"
                  export S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_equalities')
                  export MAX_SIZE_FILES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_files.equalities')
                  export MAX_SIZE_BYTES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_bytes.equalities')
                elif [[ "${CORPORATE_STORAGE_TYPE}" == "audit" ]]; then
                  echo "Setting audit corporate storage values"
                  export S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_audit')
                  export MAX_SIZE_FILES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_files.audit')
                  export MAX_SIZE_BYTES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_bytes.audit')
                elif [[ "${CORPORATE_STORAGE_TYPE}" == "main" ]]; then
                  echo "Setting main corporate storage values"
                  export S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_ucfs')
                  export MAX_SIZE_FILES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_files.main')
                  export MAX_SIZE_BYTES=$(cat ../terraform-output-ingest-consumers/outputs.json | jq -r '.k2hb_corporate_storage_coalesce_values.value.max_size_bytes.main')
                else
                  echo "Unrecognised corporate storage type of '${CORPORATE_STORAGE_TYPE}'"
                  exit 1
                fi

                echo "Set S3_BASE_PREFIX to '${S3_BASE_PREFIX}', MAX_SIZE_FILES to '${MAX_SIZE_FILES}' and MAX_SIZE_BYTES to '${MAX_SIZE_BYTES}'"
              }

              function set_global_storage_values {
                echo "Setting corporate storage values which apply to all storage types"
                export FIRST_DATE_TO_RUN=$(date -d "${START_DATE}" +"%y%M%d")

                if [[ -z "${END_DATE}" ]]; then
                  export LAST_DATE_TO_RUN="${FIRST_DATE_TO_RUN}"
                else
                  export LAST_DATE_TO_RUN=$(date -d "${END_DATE}" +"%y%M%d")
                fi

                export S3_BUCKET_ID=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_storage_bucket.value.id')
                echo "Set FIRST_DATE_TO_RUN to '${FIRST_DATE_TO_RUN}', LAST_DATE_TO_RUN to '${LAST_DATE_TO_RUN}' and S3_BUCKET_ID to '${S3_BUCKET_ID}'"
              }

              set_global_storage_values
              set_storage_type_values

              current_date_to_run="${FIRST_DATE_TO_RUN}"
              while [ ${current_date_to_run} -le ${LAST_DATE_TO_RUN} ]; do
                execute_coalesce "${current_date_to_run}"
                current_date_to_run=$(date -d "${current_date_to_run}+1 day")
              done
        inputs:
          - name: dataworks-corporate-storage-coalescence
          - name: meta
          - name: terraform-output-ingest
          - name: terraform-output-ingest-consumers