groups:
- jobs:
  - audit-development
  - audit-qa
  name: audit
- jobs:
  - update-pipeline-corporate-storage-coalescence
  name: update-pipeline
jobs:
- max_in_flight: 1
  name: audit-development
  plan:
  - in_parallel:
    - put: meta
      resource: meta-development
    - get: aws-internal-compute
      trigger: false
    - get: aws-ingestion
      trigger: false
    - get: dataworks-aws-ingest-consumers
      trigger: false
  - config:
      image_resource:
        source:
          repository: dwpdigital/jinja-yaml-aws
          tag: 0.0.19
          version: 0.0.19
        type: docker-image
      inputs:
      - name: dataworks-aws-ingest-consumers
      outputs:
      - name: terraform-bootstrap
      platform: linux
      run:
        args:
        - -exc
        - |
          python bootstrap_terraform.py
          cp terraform.tf ../terraform-bootstrap
        dir: dataworks-aws-ingest-consumers
        path: sh
    params:
      AWS_REGION: eu-west-2
    task: terraform-bootstrap
  - in_parallel:
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: aws-ingestion
        outputs:
        - name: terraform-output-ingest
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: default
        platform: linux
        run:
          args:
          - -exc
          - |
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-ingest/outputs.json
          dir: aws-ingestion
          path: sh
      task: terraform-output-ingest
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: aws-internal-compute
        outputs:
        - name: terraform-output-internal-compute
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: default
        platform: linux
        run:
          args:
          - -exc
          - |
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
          path: sh
      task: terraform-output-internal-compute
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: dataworks-aws-ingest-consumers
        - name: terraform-bootstrap
        outputs:
        - name: terraform-output-ingest-consumers
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: default
        platform: linux
        run:
          args:
          - -exc
          - |
            cp ../terraform-bootstrap/terraform.tf .
            ls -la terraform.tf
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-ingest-consumers/outputs.json
          dir: dataworks-aws-ingest-consumers
          path: sh
      task: terraform-output-ingest-consumers
- max_in_flight: 1
  name: audit-qa
  plan:
  - in_parallel:
    - put: meta
      resource: meta-qa
    - get: aws-internal-compute
      trigger: false
    - get: aws-ingestion
      trigger: false
    - get: dataworks-aws-ingest-consumers
      trigger: false
  - config:
      image_resource:
        source:
          repository: dwpdigital/jinja-yaml-aws
          tag: 0.0.19
          version: 0.0.19
        type: docker-image
      inputs:
      - name: dataworks-aws-ingest-consumers
      outputs:
      - name: terraform-bootstrap
      platform: linux
      run:
        args:
        - -exc
        - |
          python bootstrap_terraform.py
          cp terraform.tf ../terraform-bootstrap
        dir: dataworks-aws-ingest-consumers
        path: sh
    params:
      AWS_REGION: eu-west-2
    task: terraform-bootstrap
  - in_parallel:
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: aws-ingestion
        outputs:
        - name: terraform-output-ingest
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: qa
        platform: linux
        run:
          args:
          - -exc
          - |
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-ingest/outputs.json
          dir: aws-ingestion
          path: sh
      task: terraform-output-ingest
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: aws-internal-compute
        outputs:
        - name: terraform-output-internal-compute
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: qa
        platform: linux
        run:
          args:
          - -exc
          - |
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
          path: sh
      task: terraform-output-internal-compute
    - config:
        image_resource:
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
            version: ((dataworks.terraform_version))
          type: docker-image
        inputs:
        - name: dataworks-aws-ingest-consumers
        - name: terraform-bootstrap
        outputs:
        - name: terraform-output-ingest-consumers
        params:
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: false
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))
          TF_WORKSPACE: qa
        platform: linux
        run:
          args:
          - -exc
          - |
            cp ../terraform-bootstrap/terraform.tf .
            ls -la terraform.tf
            terraform workspace show
            terraform init
            terraform output --json > ../terraform-output-ingest-consumers/outputs.json
          dir: dataworks-aws-ingest-consumers
          path: sh
      task: terraform-output-ingest-consumers
- name: update-pipeline-corporate-storage-coalescence
  plan:
  - get: dataworks-aws-ingest-consumers
    resource: dataworks-aws-ingest-consumers-update-pipeline
    trigger: true
  - config:
      image_resource:
        source:
          repository: ((dataworks.docker_aviator_repository))
          version: ((dataworks.docker_aviator_version))
        type: docker-image
      inputs:
      - name: dataworks-aws-ingest-consumers
      outputs:
      - name: pipeline
      platform: linux
      run:
        args:
        - -exc
        - |
          sed -i 's/fly/nofly/' aviator-corporate-storage-coalescence.yml
          /usr/bin/aviator -f aviator-corporate-storage-coalescence.yml
          mv aviator_corporate_storage_coalescence_pipeline.yml ../pipeline
          mv ci/vars.yml ../pipeline
        dir: dataworks-aws-ingest-consumers
        path: sh
    task: aviator
  - file: pipeline/aviator_corporate_storage_coalescence_pipeline.yml
    set_pipeline: corporate-storage-coalescence
    var_files:
    - pipeline/vars.yml
resource_types:
- name: pull-request
  source:
    repository: teliaoss/github-pr-resource
    tag: latest
  type: docker-image
- name: ami
  source:
    repository: chrisscottthomas/ami-resource
    tag: latest
  type: docker-image
- name: meta
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1
  type: docker-image
resources:
- check_every: 5m
  name: dataworks-aws-ingest-consumers-update-pipeline
  source:
    access_token: ((dataworks-secrets.concourse_github_pat))
    branch: master
    paths:
    - ci/utility/corporate-storage-coalescence/*
    - ci/shared/*
    - ci/vars.yml
    - aviator-corporate-storage-coalescence.yml
    uri: https://github.com/dwp/dataworks-aws-ingest-consumers.git
  type: git
  webhook_token: ((dataworks.concourse_github_webhook_token))
- check_every: 5m
  name: dataworks-aws-ingest-consumers
  source:
    access_token: ((dataworks-secrets.concourse_github_pat))
    branch: master
    uri: https://github.com/dwp/dataworks-aws-ingest-consumers.git
  type: git
  webhook_token: ((dataworks.concourse_github_webhook_token))
- check_every: 5m
  name: aws-ingestion
  source:
    api_endpoint: https://((dataworks.enterprise_github_url))/api/v3/
    branch: master
    password: ((dataworks-secrets.enterprise_github_pat))
    uri: https://((dataworks.enterprise_github_url))/dip/aws-ingestion.git
    username: ((dataworks.enterprise_github_username))
  type: git
  webhook_token: ((dataworks.concourse_github_webhook_token))
- check_every: 5m
  name: aws-internal-compute
  source:
    api_endpoint: https://((dataworks.enterprise_github_url))/api/v3/
    branch: master
    password: ((dataworks-secrets.enterprise_github_pat))
    uri: https://((dataworks.enterprise_github_url))/dip/aws-internal-compute.git
    username: ((dataworks.enterprise_github_username))
  type: git
  webhook_token: ((dataworks.concourse_github_webhook_token))
- name: meta-development
  type: meta
- name: meta-qa
  type: meta
